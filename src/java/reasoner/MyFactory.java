package reasoner;


import reasoner.impl.*;

import edu.stanford.smi.protege.model.FrameID;
import edu.stanford.smi.protegex.owl.model.*;
import edu.stanford.smi.protegex.owl.model.impl.OWLUtil;
import edu.stanford.smi.protegex.owl.javacode.ProtegeJavaMapping;

import java.util.*;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 *
 * @version generated on Sun Nov 12 13:55:39 GMT+07:00 2017
 */
public class MyFactory {

    private OWLModel owlModel;

    static {
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Ontology1494167488.owl#song", song.class, Defaultsong.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Ontology1494167488.owl#tag", tag.class, Defaulttag.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Ontology1494167488.owl#artist", artist.class, Defaultartist.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Ontology1494167488.owl#evaluation", evaluation.class, Defaultevaluation.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Ontology1494167488.owl#user", user.class, Defaultuser.class);
        ProtegeJavaMapping.add("http://www.owl-ontologies.com/Ontology1494167488.owl#history", history.class, Defaulthistory.class);
    }

    public MyFactory(OWLModel owlModel) {
        this.owlModel = owlModel;
    }

    public <X> X create(Class<? extends X> javaInterface, String name) {
        return ProtegeJavaMapping.create(owlModel, javaInterface, name);
    }


    public RDFSNamedClass getsongClass() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#song";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public song createsong(String name) {
        final RDFSNamedClass cls = getsongClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new Defaultsong(owlModel, cls.createInstance(name).getFrameID());
    }

    public song getsong(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof song) {
            return (song) res;
        } else if (res.hasProtegeType(getsongClass())) {
            return new Defaultsong(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<song> getAllsongInstances() {
        return getAllsongInstances(false);
    }

    public Collection<song> getAllsongInstances(boolean transitive) {
        Collection<song> result = new ArrayList<song>();
        final RDFSNamedClass cls = getsongClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new Defaultsong(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass gettagClass() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#tag";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public tag createtag(String name) {
        final RDFSNamedClass cls = gettagClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new Defaulttag(owlModel, cls.createInstance(name).getFrameID());
    }

    public tag gettag(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof tag) {
            return (tag) res;
        } else if (res.hasProtegeType(gettagClass())) {
            return new Defaulttag(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<tag> getAlltagInstances() {
        return getAlltagInstances(false);
    }

    public Collection<tag> getAlltagInstances(boolean transitive) {
        Collection<tag> result = new ArrayList<tag>();
        final RDFSNamedClass cls = gettagClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new Defaulttag(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getartistClass() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#artist";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public artist createartist(String name) {
        final RDFSNamedClass cls = getartistClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new Defaultartist(owlModel, cls.createInstance(name).getFrameID());
    }

    public artist getartist(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof artist) {
            return (artist) res;
        } else if (res.hasProtegeType(getartistClass())) {
            return new Defaultartist(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<artist> getAllartistInstances() {
        return getAllartistInstances(false);
    }

    public Collection<artist> getAllartistInstances(boolean transitive) {
        Collection<artist> result = new ArrayList<artist>();
        final RDFSNamedClass cls = getartistClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new Defaultartist(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getevaluationClass() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#evaluation";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public evaluation createevaluation(String name) {
        final RDFSNamedClass cls = getevaluationClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new Defaultevaluation(owlModel, cls.createInstance(name).getFrameID());
    }

    public evaluation getevaluation(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof evaluation) {
            return (evaluation) res;
        } else if (res.hasProtegeType(getevaluationClass())) {
            return new Defaultevaluation(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<evaluation> getAllevaluationInstances() {
        return getAllevaluationInstances(false);
    }

    public Collection<evaluation> getAllevaluationInstances(boolean transitive) {
        Collection<evaluation> result = new ArrayList<evaluation>();
        final RDFSNamedClass cls = getevaluationClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new Defaultevaluation(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getuserClass() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#user";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public user createuser(String name) {
        final RDFSNamedClass cls = getuserClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new Defaultuser(owlModel, cls.createInstance(name).getFrameID());
    }

    public user getuser(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof user) {
            return (user) res;
        } else if (res.hasProtegeType(getuserClass())) {
            return new Defaultuser(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<user> getAlluserInstances() {
        return getAlluserInstances(false);
    }

    public Collection<user> getAlluserInstances(boolean transitive) {
        Collection<user> result = new ArrayList<user>();
        final RDFSNamedClass cls = getuserClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new Defaultuser(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass gethistoryClass() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#history";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public history createhistory(String name) {
        final RDFSNamedClass cls = gethistoryClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new Defaulthistory(owlModel, cls.createInstance(name).getFrameID());
    }

    public history gethistory(String name) {
        RDFResource res = owlModel.getRDFResource(OWLUtil.getInternalFullName(owlModel, name));
        if (res == null) {return null;}
        if (res instanceof history) {
            return (history) res;
        } else if (res.hasProtegeType(gethistoryClass())) {
            return new Defaulthistory(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<history> getAllhistoryInstances() {
        return getAllhistoryInstances(false);
    }

    public Collection<history> getAllhistoryInstances(boolean transitive) {
        Collection<history> result = new ArrayList<history>();
        final RDFSNamedClass cls = gethistoryClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new Defaulthistory(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFProperty getLikeProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#like";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getDislikeProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#dislike";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getListening_timesProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#listening_times";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getTitleProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#title";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getSong_idProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#song_id";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPointProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#point";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getBelongsProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#belongs";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPresented_byProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#presented_by";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getSimilarProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#similar";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHas_historyProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#has_history";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getListensProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#listens";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getPresentsProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#presents";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIncludesProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1494167488.owl#includes";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }
}
